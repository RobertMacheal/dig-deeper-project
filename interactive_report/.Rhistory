funguild <- read_tsv("data/funguild_input.guilds_matched.txt")
abundance_data <- funguild %>%
select(matches("^[A-Za-z].*")) %>%
select(-c(`OTU ID`, Taxonomy)) %>%
mutate(across(everything(), as.numeric))
abundance_matrix <- as.data.frame(t(abundance_data))
colnames(abundance_matrix) <- funguild$`OTU ID`
abundance_matrix$Site <- rownames(abundance_matrix)
shannon_index <- abundance_matrix %>%
select(-Site) %>%
diversity(index = "shannon")
shannon_df <- tibble(
Site = rownames(abundance_matrix),
Shannon = shannon_index
)
metadata <- read_tsv("data/GP_metadata.txt")  # adapte le chemin si besoin
# Joindre les deux jeux de données
shannon_merged <- left_join(shannon_df, metadata, by = "Site")
ggplot(shannon_merged, aes(x = Establishment, y = Shannon, fill = Establishment)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5, colour = "black") +
theme_minimal() +
labs(title = "Indice de Shannon par type d'établissement",
x = "Type d’établissement",
y = "Indice de Shannon") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
library(vegan)
funguild <- read_tsv("data/funguild_input.guilds_matched.txt")
abundance_data <- funguild %>%
select(matches("^[A-Za-z].*")) %>%
select(-c(`OTU ID`, Taxonomy)) %>%
mutate(across(everything(), as.numeric))
abundance_matrix <- as.data.frame(t(abundance_data))
colnames(abundance_matrix) <- funguild$`OTU ID`
abundance_matrix$Site <- rownames(abundance_matrix)
shannon_index <- abundance_matrix %>%
select(-Site) %>%
diversity(index = "shannon")
shannon_df <- tibble(
Site = rownames(abundance_matrix),
Shannon = shannon_index
)
metadata <- read_tsv("data/GP_metadata.txt")  # adapte le chemin si besoin
# Joindre les deux jeux de données
shannon_merged <- left_join(shannon_df, metadata, by = "Site")
ggplot(shannon_merged, aes(x = Establishment, y = Shannon, fill = Establishment)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Indice de Shannon par type d'établissement",
x = "Type d’établissement",
y = "Indice de Shannon") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
library(vegan)
funguild <- read_tsv("data/funguild_input.guilds_matched.txt")
abundance_data <- funguild %>%
select(matches("^[A-Za-z].*")) %>%
select(-c(`OTU ID`, Taxonomy)) %>%
mutate(across(everything(), as.numeric))
abundance_matrix <- as.data.frame(t(abundance_data))
colnames(abundance_matrix) <- funguild$`OTU ID`
abundance_matrix$Site <- rownames(abundance_matrix)
shannon_index <- abundance_matrix %>%
select(-Site) %>%
diversity(index = "shannon")
shannon_df <- tibble(
Site = rownames(abundance_matrix),
Shannon = shannon_index
)
metadata <- read_tsv("data/GP_metadata.txt")  # adapte le chemin si besoin
# Joindre les deux jeux de données
shannon_merged <- left_join(shannon_df, metadata, by = "Site")
ggplot(shannon_merged, aes(x = `Trophic Mode`, y = Shannon, fill = `Trophic Mode`)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
theme_minimal() +
labs(title = "Diversité de Shannon par mode trophique",
x = "Trophic Mode",
y = "Indice de Shannon") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(shannon_df)
View(shannon_merged)
library(tidyverse)
library(vegan)
funguild <- read_tsv("data/funguild_input.guilds_matched.txt")
abundance_data <- funguild %>%
select(matches("^[A-Za-z].*")) %>%
select(-c(`OTU ID`, Taxonomy)) %>%
mutate(across(everything(), as.numeric))
abundance_matrix <- as.data.frame(t(abundance_data))
colnames(abundance_matrix) <- funguild$`OTU ID`
abundance_matrix$Site <- rownames(abundance_matrix)
shannon_index <- abundance_matrix %>%
select(-Site) %>%
diversity(index = "shannon")
shannon_df <- tibble(
Site = rownames(abundance_matrix),
Shannon = shannon_index
)
shannon_df<- shannon_df %>%
filter(!is.na(Shannon), !is.na(Site))
metadata <- read_tsv("data/GP_metadata.txt")  # adapte le chemin si besoin
# Joindre les deux jeux de données
shannon_merged <- left_join(shannon_df, metadata, by = "Site")
ggplot(shannon_merged, aes(x = `Trophic Mode`, y = Shannon, fill = `Trophic Mode`)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
theme_minimal() +
labs(title = "Diversité de Shannon par mode trophique",
x = "Trophic Mode",
y = "Indice de Shannon") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
library(vegan)
funguild <- read_tsv("data/funguild_input.guilds_matched.txt")
abundance_data <- funguild %>%
select(matches("^[A-Za-z].*")) %>%
select(-c(`OTU ID`, Taxonomy)) %>%
mutate(across(everything(), as.numeric))
abundance_matrix <- as.data.frame(t(abundance_data))
colnames(abundance_matrix) <- funguild$`OTU ID`
abundance_matrix$Site <- rownames(abundance_matrix)
shannon_index <- abundance_matrix %>%
select(-Site) %>%
diversity(index = "shannon")
shannon_df <- tibble(
Site = rownames(abundance_matrix),
Shannon = shannon_index
)
shannon_df<- shannon_df %>% filter(
!is.na(Shannon),
!Site %in% c("Taxon", "Taxon Level", "Trophic Mode", "Guild",
"Growth Morphology", "Trait", "Confidence Ranking",
"Notes", "Citation/Source")
)
metadata <- read_tsv("data/GP_metadata.txt")  # adapte le chemin si besoin
# Joindre les deux jeux de données
shannon_merged <- left_join(shannon_df, metadata, by = "Site")
ggplot(df_clean, aes(x = Site, y = Shannon, fill = Site)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
theme_minimal() +
labs(title = "Indice de Shannon par site",
x = "Site",
y = "Shannon Index") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
library(vegan)
funguild <- read_tsv("data/funguild_input.guilds_matched.txt")
abundance_data <- funguild %>%
select(matches("^[A-Za-z].*")) %>%
select(-c(`OTU ID`, Taxonomy)) %>%
mutate(across(everything(), as.numeric))
abundance_matrix <- as.data.frame(t(abundance_data))
colnames(abundance_matrix) <- funguild$`OTU ID`
abundance_matrix$Site <- rownames(abundance_matrix)
shannon_index <- abundance_matrix %>%
select(-Site) %>%
diversity(index = "shannon")
shannon_df <- tibble(
Site = rownames(abundance_matrix),
Shannon = shannon_index
)
shannon_df<- shannon_df %>% filter(
!is.na(Shannon),
!Site %in% c("Taxon", "Taxon Level", "Trophic Mode", "Guild",
"Growth Morphology", "Trait", "Confidence Ranking",
"Notes", "Citation/Source")
)
metadata <- read_tsv("data/GP_metadata.txt")  # adapte le chemin si besoin
# Joindre les deux jeux de données
shannon_merged <- left_join(shannon_df, metadata, by = "Site")
ggplot(shannon_merged, aes(x = Site, y = Shannon, fill = Site)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
theme_minimal() +
labs(title = "Indice de Shannon par site",
x = "Site",
y = "Shannon Index") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
library(vegan)
funguild <- read_tsv("data/funguild_input.guilds_matched.txt")
abundance_data <- funguild %>%
select(matches("^[A-Za-z].*")) %>%
select(-c(`OTU ID`, Taxonomy)) %>%
mutate(across(everything(), as.numeric))
abundance_matrix <- as.data.frame(t(abundance_data))
colnames(abundance_matrix) <- funguild$`OTU ID`
abundance_matrix$Site <- rownames(abundance_matrix)
shannon_index <- abundance_matrix %>%
select(-Site) %>%
diversity(index = "shannon")
shannon_df <- tibble(
Site = rownames(abundance_matrix),
Shannon = shannon_index
)
shannon_df<- shannon_df %>% filter(
!is.na(Shannon),
!Site %in% c("Taxon", "Taxon Level", "Trophic Mode", "Guild",
"Growth Morphology", "Trait", "Confidence Ranking",
"Notes", "Citation/Source")
)
metadata <- read_tsv("data/GP_metadata.txt")  # adapte le chemin si besoin
# Joindre les deux jeux de données
shannon_merged <- left_join(shannon_df, metadata, by = "Site")
ggplot(shannon_merged, aes(x = Establishment, y = Shannon, fill = Site)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
theme_minimal() +
labs(title = "Indice de Shannon par site",
x = "Site",
y = "Shannon Index") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
library(vegan)
funguild <- read_tsv("data/funguild_input.guilds_matched.txt")
abundance_data <- funguild %>%
select(matches("^[A-Za-z].*")) %>%
select(-c(`OTU ID`, Taxonomy)) %>%
mutate(across(everything(), as.numeric))
abundance_matrix <- as.data.frame(t(abundance_data))
colnames(abundance_matrix) <- funguild$`OTU ID`
abundance_matrix$Site <- rownames(abundance_matrix)
shannon_index <- abundance_matrix %>%
select(-Site) %>%
diversity(index = "shannon")
shannon_df <- tibble(
Site = rownames(abundance_matrix),
Shannon = shannon_index
)
shannon_df<- shannon_df %>% filter(
!is.na(Shannon),
!Site %in% c("Taxon", "Taxon Level", "Trophic Mode", "Guild",
"Growth Morphology", "Trait", "Confidence Ranking",
"Notes", "Citation/Source")
)
metadata <- read_tsv("data/GP_metadata.txt")  # adapte le chemin si besoin
# Joindre les deux jeux de données
shannon_merged <- left_join(shannon_df, metadata, by = "Site")
ggplot(shannon_merged, aes(x = Establishment, y = Shannon, fill = Establishment)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
theme_minimal() +
labs(title = "Indice de Shannon par estblishment",
x = "Site",
y = "Shannon Index") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
library(vegan)
funguild <- read_tsv("data/funguild_input.guilds_matched.txt")
abundance_data <- funguild %>%
select(matches("^[A-Za-z].*")) %>%
select(-c(`OTU ID`, Taxonomy)) %>%
mutate(across(everything(), as.numeric))
abundance_matrix <- as.data.frame(t(abundance_data))
colnames(abundance_matrix) <- funguild$`OTU ID`
abundance_matrix$Site <- rownames(abundance_matrix)
shannon_index <- abundance_matrix %>%
select(-Site) %>%
diversity(index = "shannon")
shannon_df <- tibble(
Site = rownames(abundance_matrix),
Shannon = shannon_index
)
shannon_df<- shannon_df %>% filter(
!is.na(Shannon),
!Site %in% c("Taxon", "Taxon Level", "Trophic Mode", "Guild",
"Growth Morphology", "Trait", "Confidence Ranking",
"Notes", "Citation/Source")
)
metadata <- read_tsv("data/GP_metadata.txt")  # adapte le chemin si besoin
# Joindre les deux jeux de données
shannon_merged <- left_join(shannon_df, metadata, by = "Site")
ggplot(shannon_merged, aes(x = Establishment, y = Shannon, fill = Establishment)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Indice de Shannon par estblishment",
x = "Site",
y = "Shannon Index") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(abundance_data)
View(abundance_matrix)
setwd("~/Cranfield/Group_project/dig-deeper-project/interactive_report")
# Charger les données
df <- read_tsv("GP_metadata.tsv")
library(tidyverse)
library(ggplot2)
library(sf)
install.packages("sf")
library(tidyverse)
library(ggplot2)
library(sf)
library(rnaturalearth)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(tidyverse)
library(ggplot2)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Charger les données
df <- read_tsv("GP_metadata.tsv")
# Charger les données
df <- read_tsv("GP_metadata.txt")
# Charger les librairies
library(ggplot2)
library(sf)
library(rnaturalearth)
library(readr)
# Charger la carte du Royaume-Uni
uk <- ne_countries(scale = "medium", returnclass = "sf") %>%
dplyr::filter(admin == "United Kingdom")
# Charger les données
df <- read_delim("GP_metadata.txt", delim = "\t")
# Charger les librairies
library(ggplot2)
library(sf)
library(rnaturalearth)
library(readr)
# Charger la carte du Royaume-Uni
uk <- ne_countries(scale = "medium", returnclass = "sf") %>%
dplyr::filter(admin == "United Kingdom")
# Charger les données
df <- read_delim("GP_metadata.txt", delim = "\t")
# Charger la carte du Royaume-Uni
uk <- ne_countries(scale = "medium", returnclass = "sf") %>%
dplyr::filter(admin == "United Kingdom")
# Charger les données
df <- read_delim("GP_metadata.txt", delim = "\t")
# Charger la carte du Royaume-Uni
uk <- ne_countries(scale = "medium", returnclass = "sf") %>%
dplyr::filter(admin == "United Kingdom")
# Charger les données
df <- read_delim("data/GP_metadata.txt", delim = "\t")
# Séparer la colonne lat_long en deux
df <- df |>
tidyr::separate(Lat_long, into = c("Latitude", "Longitude"), sep = ", ", convert = TRUE)
# Convertir en objet spatial
df_sf <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
# Plot
ggplot(data = uk) +
geom_sf(fill = "grey90", colour = "white") +
geom_sf(data = df_sf, aes(color = Site), size = 2) +
coord_sf(xlim = c(-2.5, 1), ylim = c(50.5, 52.5), expand = FALSE) +
theme_minimal() +
labs(title = "Sampling locations in England")
# Charger les librairies
library(ggplot2)
library(sf)
library(rnaturalearth)
library(readr)
# Charger la carte du Royaume-Uni
uk <- ne_countries(scale = "medium", returnclass = "sf") %>%
dplyr::filter(admin == "United Kingdom")
# Charger les données
df <- read_delim("data/GP_metadata.txt", delim = "\t")
# Séparer la colonne lat_long en deux
df <- df |>
tidyr::separate(Lat_long, into = c("Latitude", "Longitude"), sep = ", ", convert = TRUE)
# Convertir en objet spatial
df_sf <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
# Plot
ggplot(data = uk) +
geom_sf(fill = "grey90", colour = "white") +
geom_sf(data = df_sf, aes(color = Site), size = 2) +
coord_sf(xlim = c(-2.5, 1), ylim = c(50.5, 52.5), expand = FALSE) +
theme_minimal() +
labs(title = "Sampling locations in England")
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
# Charger ton fichier
df <- read.delim("GP_metadata.txt")
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
# Charger ton fichier
df <- read.delim("data/GP_metadata.txt")
# Extraire les coordonnées
df <- df %>%
mutate(
lat = as.numeric(sub(",.*", "", Lat_long)),
long = as.numeric(sub(".*,", "", Lat_long))
) %>%
filter(!is.na(lat), !is.na(long))
# Créer un objet spatial
points_sf <- st_as_sf(df, coords = c("long", "lat"), crs = 4326)
# Créer le polygone englobant (enveloppe convexe)
hull <- st_convex_hull(st_union(points_sf))
# Récupérer la carte du Royaume-Uni
uk <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin == "United Kingdom")
# Plot
ggplot() +
geom_sf(data = uk, fill = "gray95", color = "black") +
geom_sf(data = hull, fill = "deepskyblue", alpha = 0.4, color = "deepskyblue4") +
coord_sf(xlim = c(-3, 2), ylim = c(50.5, 52)) + # Ajuster selon ta zone
theme_minimal() +
labs(title = "Sampling Zone", subtitle = "Based on GPS coordinates")
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
# Charger ton fichier
df <- read.delim("data/GP_metadata.txt")
# Extraire les coordonnées
df <- df %>%
mutate(
lat = as.numeric(sub(",.*", "", Lat_long)),
long = as.numeric(sub(".*,", "", Lat_long))
) %>%
filter(!is.na(lat), !is.na(long))
# Créer un objet spatial
points_sf <- st_as_sf(df, coords = c("long", "lat"), crs = 4326)
# Créer le polygone englobant (enveloppe convexe)
hull <- st_convex_hull(st_union(points_sf))
# Récupérer la carte du Royaume-Uni
uk <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin == "United Kingdom")
# Plot
ggplot() +
geom_sf(data = uk, fill = "gray95", color = "black") +
geom_sf(data = hull, fill = "deepskyblue", alpha = 0.4, color = "deepskyblue4") +
# Ajuster selon ta zone
theme_minimal() +
labs(title = "Sampling Zone", subtitle = "Based on GPS coordinates")
library(readr)
library(dplyr)
library(tidyr)
library(leaflet)
install.packages("leaflet")
library(readr)
library(dplyr)
library(tidyr)
library(leaflet)
# Charger les données
df_meta <- read_tsv("data/GP_metadata.txt", col_types = cols())
# Extraire lat/lon de la colonne "Lat_long"
df_meta <- df_meta %>%
separate(Lat_long, into = c("Latitude", "Longitude"), sep = ", ", convert = TRUE)
# Ne garder qu'un seul point par site
df_sites <- df_meta %>%
group_by(Site) %>%
summarise(
Latitude = first(Latitude),
Longitude = first(Longitude),
.groups = "drop"
)
# Créer la carte
leaflet(df_sites) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
~Longitude, ~Latitude,
radius = 5,
color = "darkblue",
fillOpacity = 0.7,
stroke = FALSE,
label = ~Site,
labelOptions = labelOptions(noHide = FALSE, direction = "auto")
)
library(plotly)
# Données fictives
table_data <- list(
list("Marker", "Average Reads", "Range"),
list("16S rRNA", "~65,000", "30,000 – 85,000"),
list("ITS", "~65,000", "10,000 – 90,000")
)
# Tableau plotly
p_table <- plot_ly(
type = "table",
header = list(values = table_data[[1]], fill = list(color = "lightgrey")),
cells = list(values = transpose(table_data[-1]), align = "center")
)
# Carte plotly (exemple simple)
p_map <- plot_geo() %>%
add_markers(
lat = c(51.5, 51.6, 51.4),
lon = c(-1.5, -1.6, -1.7),
text = c("Site A", "Site B", "Site C"),
marker = list(size = 10)
) %>%
layout(geo = list(scope = "europe", projection = list(type = "mercator")))
ggplot() +
geom_sf(data = uk, fill = "gray95", color = "black") +
geom_sf(data = hull, fill = "deepskyblue4", alpha = 0.4, color = "deepskyblue3") +
theme_minimal() +
labs(title = "Sample Zone - Based on GPS coordinates") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
df <- read.delim("data/GP_metadata.txt")
df <- df %>%
mutate(
lat = as.numeric(sub(",.*", "", Lat_long)),
long = as.numeric(sub(".*,", "", Lat_long))
) %>%
filter(!is.na(lat), !is.na(long))
points_sf <- st_as_sf(df, coords = c("long", "lat"), crs = 4326)
hull <- st_convex_hull(st_union(points_sf))
uk <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin == "United Kingdom")
map_plot <- ggplot() +
geom_sf(data = uk, fill = "gray95", color = "black") +
geom_sf(data = hull, fill = "deepskyblue4", alpha = 0.4, color = "black") +
theme_minimal() +
coord_sf(expand = FALSE)
ggsave("images/map_plot.png", map_plot, width = 6, height = 8, dpi = 300)
