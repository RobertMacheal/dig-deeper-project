p2 <- ggplot(results_EN1, aes(x = Observed, y = Predicted)) +
geom_point(color = "deeppink3", alpha = 1, size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +  # y = x
geom_abline(slope = 1, intercept = 2, linetype = "dotted", color = "gray") +   # y = x + 2
geom_abline(slope = 1, intercept = -2, linetype = "dotted", color = "gray") +  # y = x - 2
labs(title = "Actual vs Predicted (Elastic Net)",
x = "Actual Adulteration (%)",
y = "Predicted Adulteration (%)") +
theme_minimal()
p3 <- ggplot(results_RF2, aes(x = Observed, y = Predicted)) +
geom_point(color = "darkmagenta", alpha = 1, size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +  # y = x
geom_abline(slope = 1, intercept = 2, linetype = "dotted", color = "gray") +   # y = x + 2
geom_abline(slope = 1, intercept = -2, linetype = "dotted", color = "gray") +  # y = x - 2
labs(title = "Actual vs Predicted (Random Forest) ",
x = "Actual Adulteration (%)",
y = "Predicted Adulteration (%)") +
theme_minimal()
p4 <- ggplot(results_EN2, aes(x = Observed, y = Predicted)) +
geom_point(color = "darkslategray4", alpha = 1, size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +  # y = x
geom_abline(slope = 1, intercept = 2, linetype = "dotted", color = "gray") +   # y = x + 2
geom_abline(slope = 1, intercept = -2, linetype = "dotted", color = "gray") +  # y = x - 2
labs(title ="Actual vs Predicted (Elastic Net)",
x = "Actual Adulteration (%)",
y = "Predicted Adulteration (%)") +
theme_minimal()
grid.arrange(p1, p2, p3, p4, nrow = 2)
var_imp_rf <- as.data.frame(importance(best_learner_RF$model))
var_imp_rf$Variable <- rownames(var_imp_rf)
colnames(var_imp_rf)[1] <- "importance"
top_rf <- var_imp_rf %>%
arrange(desc(importance)) %>%
head(20)
# Plot
ggplot(top_rf, aes(x = reorder(Variable, importance), y = importance)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top 20 Most Important Variables (Random Forest)",
x = "Variables",
y = "Importance") +
theme_minimal()
var_imp_en <- as.data.frame(as.matrix(coef(best_learner_EN$model)))
colnames(var_imp_en) <- c("Importance")
var_imp_en$Variable <- rownames(var_imp_en)
var_imp_en <- var_imp_en %>%
dplyr::select(Importance, Variable)
top_en <- var_imp_en %>%
filter(Variable != "(Intercept)") %>%
arrange(desc(abs(Importance))) %>%
head(20)
# Plot
ggplot(top_en, aes(x = reorder(Variable, abs(Importance)), y = abs(Importance))) +
geom_bar(stat = "identity", fill = "tomato") +
coord_flip() +
labs(title = "Top 20 Most Important Variables (Elastic Net)",
x = "Variables",
y = "Absolute Coefficient Value") +
theme_minimal()
set.seed(123)
honey_sample <- AllData %>%
filter(class == "honey") %>%
distinct(sample_name, .keep_all = TRUE) %>%
sample_n(1)
honey_num <- gsub("honey_", "", honey_sample$sample_name)
corresponding_spiked_samples <- AllData %>%
filter(grepl(paste0("^hon", honey_num, "_[0-9]+%$"), sample_name))
selected_rows <- AllData %>%
filter(sample_name %in% c(corresponding_spiked_samples$sample_name, honey_sample$sample_name, "syrup1")) %>%
dplyr::select(-class)
selected_rows_long <- selected_rows %>%
pivot_longer(cols = -sample_name, names_to = "wavelength", values_to = "intensity") %>%
mutate(wavelength = as.numeric(gsub("X", "", wavelength)))
top_variables_en <- top_en %>% arrange(desc(abs(Importance))) %>% head(20) %>% mutate(Wavelength = as.numeric(gsub("^X", "", Variable))) %>%  pull(Wavelength)
top_variables_rf <- top_rf %>% arrange(desc(importance)) %>% head(20) %>% mutate(Wavelength = as.numeric(gsub("^X", "", Variable))) %>%  pull(Wavelength)
p <- ggplot(selected_rows_long, aes(x = wavelength, y = intensity, color = sample_name)) +
geom_line(linewidth = 0.5) +
#geom_vline(xintercept = top_variables_rf, color = "blue", linetype = "dashed", alpha = 0.6)
geom_vline(xintercept = top_variables_en, color = "red", linetype = "dashed", alpha = 0.6)
labs(x = "Wavelength (nm)",
y = "Intensity",
color = "Sample") +
theme_minimal()
print(p)
p <- ggplot(selected_rows_long, aes(x = wavelength, y = intensity, color = sample_name)) +
geom_line(linewidth = 0.5) +
geom_vline(xintercept = top_variables_rf, color = "blue", linetype = "dashed", alpha = 0.6)
#geom_vline(xintercept = top_variables_en, color = "red", linetype = "dashed", alpha = 0.6)
labs(x = "Wavelength (nm)",
y = "Intensity",
color = "Sample") +
theme_minimal()
print(p)
sugars_list <- c("fructose_50%", "glucose_50%", "sucrose_50%","maltose_50%")
#we create a dataframe with all the samples of interest
selected_rows <- AllData %>%
filter(sample_name %in% sugars_list)
selected_rows <- selected_rows %>%
dplyr::select(-class)
#we create a new dataframe with a colonne wavelengh and intensity to make it easier for the plotting
selected_rows_long <- selected_rows %>%
pivot_longer(cols = -sample_name, names_to = "wavelength", values_to = "intensity") %>%
mutate(wavelength = as.numeric(gsub("X", "", wavelength)))
ggplot(selected_rows_long, aes(x = wavelength, y = intensity, color = sample_name)) +
geom_line(linewidth = 0.5) +
#geom_vline(xintercept = top_variables_rf, color = "blue", linetype = "dashed", alpha = 0.6)
geom_vline(xintercept = top_variables_en, color = "red", linetype = "dashed", alpha = 0.6)
labs(x = "Wavelength (nm)",
y = "Intensity",
color = "Sample") +
theme_minimal()
ggplot(selected_rows_long, aes(x = wavelength, y = intensity, color = sample_name)) +
geom_line(linewidth = 0.5) +
geom_vline(xintercept = top_variables_rf, color = "blue", linetype = "dashed", alpha = 0.6)
#geom_vline(xintercept = top_variables_en, color = "red", linetype = "dashed", alpha = 0.6)
labs(x = "Wavelength (nm)",
y = "Intensity",
color = "Sample") +
theme_minimal()
sugars_list <- c("fructose_50%", "glucose_50%", "sucrose_50%","maltose_50%")
#we create a dataframe with all the samples of interest
selected_rows <- AllData %>%
filter(sample_name %in% sugars_list)
selected_rows <- selected_rows %>%
dplyr::select(-class)
#we create a new dataframe with a colonne wavelengh and intensity to make it easier for the plotting
selected_rows_long <- selected_rows %>%
pivot_longer(cols = -sample_name, names_to = "wavelength", values_to = "intensity") %>%
mutate(wavelength = as.numeric(gsub("X", "", wavelength)))
ggplot(selected_rows_long, aes(x = wavelength, y = intensity, color = sample_name)) +
geom_line(linewidth = 0.5) +
#geom_vline(xintercept = top_variables_rf, color = "blue", linetype = "dashed", alpha = 0.6)
geom_vline(xintercept = top_variables_en, color = "red", linetype = "dashed", alpha = 0.6)
labs(x = "Wavelength (nm)",
y = "Intensity",
color = "Sample") +
theme_minimal()
ggplot(selected_rows_long, aes(x = wavelength, y = intensity, color = sample_name)) +
geom_line(linewidth = 0.5) +
geom_vline(xintercept = top_variables_rf, color = "blue", linetype = "dashed", alpha = 0.6)
#geom_vline(xintercept = top_variables_en, color = "red", linetype = "dashed", alpha = 0.6)
labs(x = "Wavelength (nm)",
y = "Intensity",
color = "Sample") +
theme_minimal()
# définir les données des variants HIGH impact
variants <- data.frame(
chr = "chr3",   # Exemple : Chromosome 3
start = c(1200000, 5000000, 8000000, 12000000, 18000000), # Positions des variants
end = c(1200000, 5000000, 8000000, 12000000, 18000000),   # Même valeur que start (variants ponctuels)
gene = c("GeneA", "GeneB", "GeneC", "GeneD", "GeneE")  # Noms des gènes impactés
)
View(variants)
library(karyoploteR)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("karyoploteR")
library(karyoploteR)
# définir les données des variants HIGH impact
variants <- data.frame(
chr = "chr3",   # Exemple : Chromosome 3
start = c(1200000, 5000000, 8000000, 12000000, 18000000), # Positions des variants
end = c(1200000, 5000000, 8000000, 12000000, 18000000),   # Même valeur que start (variants ponctuels)
gene = c("GeneA", "GeneB", "GeneC", "GeneD", "GeneE")  # Noms des gènes impactés
)
#Créer une visualisation du chromosome avec karyoploteR
kp <- plotKaryotype(genome="hg19", chromosomes="chr3")  # hg19 = Génome humain, adapte-le selon ton espèce
#  Ajouter les variants HIGH impact (points rouges)
kpPoints(kp, data=variants, chr=variants$chr, x=variants$start, y=rep(0, nrow(variants)), col="red", cex=2)
#  Ajouter les noms des gènes à côté des variants
#(kp, data=variants, chr = variants$chr, labels=variants$gene)
kpPlotMarkers(kp, data=variants, chr=variants$chr, x=variants$start, y=rep(0.05, nrow(variants)), labels=variants$gene, col="blue")
library(karyoploteR)
# définir les données des variants HIGH impact
variants <- data.frame(
chr = "chr3",   # Exemple : Chromosome 3
start = c(1200000, 5000000, 8000000, 12000000, 18000000), # Positions des variants
end = c(1200000, 5000000, 8000000, 12000000, 18000000),   # Même valeur que start (variants ponctuels)
gene = c("GeneA", "GeneB", "GeneC", "GeneD", "GeneE")  # Noms des gènes impactés
)
#Créer une visualisation du chromosome avec karyoploteR
kp <- plotKaryotype(genome="hg19", chromosomes="chr3")  # hg19 = Génome humain, adapte-le selon ton espèce
#  Ajouter les variants HIGH impact (points rouges)
kpPoints(kp, data=variants, chr=variants$chr, x=variants$start, y=rep(0, nrow(variants)), col="red", cex=2)
View(variants)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("karyoploteR")
library(karyoploteR)
# définir les données des variants HIGH impact
variants <- data.frame(
chr = "chr3",   # Exemple : Chromosome 3
start = c(1200000, 5000000, 8000000, 12000000, 18000000), # Positions des variants
end = c(1200000, 5000000, 8000000, 12000000, 18000000),   # Même valeur que start (variants ponctuels)
gene = c("GeneA", "GeneB", "GeneC", "GeneD", "GeneE")  # Noms des gènes impactés
)
#Créer une visualisation du chromosome avec karyoploteR
kp <- plotKaryotype(genome="hg19", chromosomes="chr3")  # hg19 = Génome humain, adapte-le selon ton espèce
#  Ajouter les variants HIGH impact (points rouges)
kpPoints(kp, data=variants, chr=variants$chr, x=variants$start, y=rep(0, nrow(variants)), col="red", cex=2)
library(karyoploteR)
# définir les données des variants HIGH impact
variants <- data.frame(
chr = "chr3",   # Exemple : Chromosome 3
start = c(1200000, 5000000, 8000000, 12000000, 18000000), # Positions des variants
end = c(1200000, 5000000, 8000000, 12000000, 18000000),   # Même valeur que start (variants ponctuels)
gene = c("GeneA", "GeneB", "GeneC", "GeneD", "GeneE")  # Noms des gènes impactés
)
#Créer une visualisation du chromosome avec karyoploteR
kp <- plotKaryotype(genome="hg19", chromosomes="chr3")  # hg19 = Génome humain, adapte-le selon ton espèce
#  Ajouter les variants HIGH impact (points rouges)
kpPoints(kp, data=variants, chr=variants$chr, x=variants$start, y=rep(0, nrow(variants)), col="red", cex=2)
library(jsonlite)
library(karyoploteR)
# Charger les données JSON envoyées par Node.js
experiment <- "ds001a3"
request <- GET(paste("http://localhost:3000/api/high-impact/RF_001/3",
experiment, sep=''))
library(httr)
library(jsonlite)
library(ggplot2)
library(growthrates)
library(jsonlite)
library(karyoploteR)
# Charger les données JSON envoyées par Node.js
request <- GET("http://localhost:3000/api/high-impact/RF_001/3")
response <- content(request, as = "text", encoding = "UTF-8")
variants <- fromJSON(response)
View(variants)
library(jsonlite)
library(karyoploteR)
# Charger les données JSON envoyées par Node.js
request <- GET("http://localhost:3000/api/high-impact/RF_001/3")
response <- content(request, as = "text", encoding = "UTF-8")
variants <- fromJSON(response)
View(variants)
library(chromPlot)
install.packages("devtools")
devtools::install_github("jvanheld/ChromPlot")
install.packages("ggbio")
library(ggbio)
install.packages("ggbio")
df$Chromosome <- c(SL2.50ch01,SL2.50ch02, SL2.50ch03,SL2.50ch04,SL2.50ch05,SL2.50ch06,
SL2.50ch07,SL2.50ch08,SL2.50ch09,SL2.50ch10, SL2.50ch11,SL2.50ch12)
df$Chromosome <- c("SL2.50ch01","SL2.50ch02", "SL2.50ch03","SL2.50ch04","SL2.50ch05","SL2.50ch06",
"SL2.50ch07","SL2.50ch08","SL2.50ch09","SL2.50ch10", "SL2.50ch11","SL2.50ch12")
View(df)
df <- data.frame(
Chromosome = c("SL2.50ch01", "SL2.50ch02", "SL2.50ch03", "SL2.50ch04", "SL2.50ch05",
"SL2.50ch06", "SL2.50ch07", "SL2.50ch08", "SL2.50ch09", "SL2.50ch10",
"SL2.50ch11", "SL2.50ch12"),
Size = c(98200000, 55000000, 68000000, 66000000, 78000000, 60000000, 65000000,
57000000, 60000000, 56000000, 53000000, 65000000)
)
View(df)
library(chromoMap)
chrom_list <- c("SL2.50ch03", "SL2.50ch05", "SL2.50ch07")
chromosome_data <- df[df$Chromosome %in% chrom_list, ]  # Filtrer uniquement les chromosomes de la liste
chromosome_data$start <- 1
chromosome_data <- chromosome_data[, c("Chromosome", "start", "Size")]
colnames(chromosome_data) <- c("chromosome", "start", "end")
View(chromosome_data)
request <- GET("http://localhost:3000/api/high-impact/RF_001/3")
response <- content(request, as = "text", encoding = "UTF-8")
variants <- fromJSON(response)
View(variants)
chrom_list <- unique(variants$chromosome)
chromosome_data <- df[df$Chromosome %in% chrom_list, ]  # Filtrer uniquement les chromosomes de la liste
chromosome_data$start <- 1
View(chromosome_data)
chromosome_data <- chromosome_data[, c("Chromosome", "start", "Size")]
colnames(chromosome_data) <- c("chromosome", "start", "end")
View(chromosome_data)
variant_data <- data.frame(
chromosome = variants$chromosome,
start = variants$position,
end = variants$position,
annotation = variants$gene_name
)
View(variants)
View(variant_data)
View(variants)
View(variant_data)
library(chromoMap)
#library(httr)
library(jsonlite)
# Charger les données JSON envoyées par Node.js
request <- GET("http://localhost:3000/api/high-impact/RF_001")
response <- content(request, as = "text", encoding = "UTF-8")
variants <- fromJSON(response)
chrom_list <- unique(variants$chromosome)
View(variants)
chrom_list <- unique(variants$chromosome)
chromosome_data <- df[df$Chromosome %in% chrom_list, ]  # Filtrer uniquement les chromosomes de la liste
chromosome_data$start <- 1
chromosome_data <- chromosome_data[, c("Chromosome", "start", "Size")]
colnames(chromosome_data) <- c("chromosome", "start", "end")
variant_data <- data.frame(
chromosome = variants$chromosome,
start = variants$position,
end = variants$position,
annotation = variants$gene_name
)
# Afficher le chromosome avec les variants HIGH impact
chromoMap(
list(chromosome_data),
list(variant_data),
data_based_color_map = TRUE,
labels = TRUE,
segment_annotation = TRUE
)
View(chromosome_data)
View(variant_data)
library(dplyr)
#Grouper les variants par chromosome
variant_data <- variants %>%
group_by(chromosome) %>%
summarise(
start = paste(position, collapse = ";"),  # Toutes les positions dans une seule cellule
end = paste(position, collapse = ";"),  # Même valeur que start
annotation = paste(gene_name, collapse = ";")  # Toutes les annotations concaténées
)
View(variant_data)
# Afficher le chromosome avec les variants HIGH impact
chromoMap(
list(chromosome_data),
list(variant_data),
data_based_color_map = TRUE,
labels = TRUE,
segment_annotation = TRUE
)
variant_data <- variants %>%
group_by(chromosome) %>%
summarise(
start = paste(position, collapse = ";"),  # Toutes les positions dans une seule cellule
end = paste(position, collapse = ";"),  # Même valeur que start
annotation = paste(gene_name, collapse = ";")  # Toutes les annotations concaténées
) %>% as.data.frame()
chromoMap(
list(chromosome_data),
list(variant_data),
data_based_color_map = TRUE,
labels = TRUE,
segment_annotation = TRUE
)
variant_data <- data.frame(
chromosome = variants$chromosome,
start = variants$position,
end = variants$position,
annotation = variants$gene_name
)
chromoMap(
list(chromosome_data),
list(variant_data),
data_based_color_map = TRUE,
labels = TRUE,
segment_annotation = TRUE
)
print("=== Vérification de chromosome_data ===")
print(chromosome_data)
str(chromosome_data)
print("=== Vérification de variant_data ===")
print(variant_data)
str(variant_data)
setdiff(variant_data$chromosome, chromosome_data$chromosome)
chromosome_data$start <- as.integer(chromosome_data$start)
chromosome_data$end <- as.integer(chromosome_data$end)
chromoMap(
list(chromosome_data),
list(variant_data),
data_based_color_map = TRUE,
labels = TRUE,
segment_annotation = TRUE
)
variant_data$ID <- paste0("An", seq_len(nrow(variant_data)))
variant_data <- variant_data[, c("ID", "chromosome", "start", "end", "annotation")]
View(variant_data)
chromoMap(
list(chromosome_data),
list(variant_data),
data_based_color_map = TRUE,
labels = TRUE,
segment_annotation = TRUE
)
View(variant_data)
str(variant_data)
chrom_list <- unique(variants$chromosome)
chromosome_data <- df[df$Chromosome %in% chrom_list, ]  # Filtrer uniquement les chromosomes de la liste
chromosome_data$start <- 1
chromosome_data <- chromosome_data[, c("Chromosome", "start", "Size")]
colnames(chromosome_data) <- c("chromosome", "start", "end")
str(chromosome_data)
variant_data <- data.frame(
chromosome = variants$chromosome,
start = variants$position,
end = variants$position,
annotation = variants$gene_name
)
variant_data$ID <- paste0("An", seq_len(nrow(variant_data)))
variant_data <- variant_data[, c("ID", "chromosome", "start", "end", "annotation")]
variant_data$start <- as.numeric(variant_data$start)
variant_data$end <- as.numeric(variant_data$end)
str(variant_data)
chromoMap(
list(chromosome_data),
list(variant_data),
data_based_color_map = TRUE,
labels = TRUE,
segment_annotation = TRUE
)
# Afficher le chromosome avec les variants HIGH impact
chromoMap(
list(chromosome_data),
list(variant_data),
labels = TRUE,
segment_annotation = TRUE
)
df <- data.frame(
Chromosome = c("SL2.50ch01", "SL2.50ch02", "SL2.50ch03", "SL2.50ch04", "SL2.50ch05",
"SL2.50ch06", "SL2.50ch07", "SL2.50ch08", "SL2.50ch09", "SL2.50ch10",
"SL2.50ch11", "SL2.50ch12"),
Size = c(98200000, 55000000, 68000000, 66000000, 78000000, 60000000, 65000000,
57000000, 60000000, 56000000, 53000000, 65000000)
)
library(chromoMap)
#library(httr)
library(jsonlite)
# Charger les données JSON envoyées par Node.js
request <- GET("http://localhost:3000/api/high-impact/RF_001")
response <- content(request, as = "text", encoding = "UTF-8")
variants <- fromJSON(response)
chrom_list <- unique(variants$chromosome)
chromosome_data <- df[df$Chromosome %in% chrom_list, ]  # Filtrer uniquement les chromosomes de la liste
chromosome_data$start <- 1
chromosome_data <- chromosome_data[, c("Chromosome", "start", "Size")]
colnames(chromosome_data) <- c("chromosome", "start", "end")
variant_data <- data.frame(
chromosome = variants$chromosome,
start = variants$position,
end = variants$position,
annotation = variants$gene_name
)
#variant_data$ID <- paste0("An", seq_len(nrow(variant_data)))
variant_data <- variant_data[, c("annotation", "chromosome", "start", "end")]
variant_data$start <- as.numeric(variant_data$start)
variant_data$end <- as.numeric(variant_data$end)
str(variant_data)
# Afficher le chromosome avec les variants HIGH impact
chromoMap(
list(chromosome_data),
list(variant_data),
labels = TRUE,
segment_annotation = TRUE
)
install.packages("Cairo")
install.packages("base64enc")
devtools::install_github("jbisanz/qiime2R")
library(qiime2R)
setwd("~/Cranfield/Group_project/dig-deeper-project/interactive_report")
library(qiime2R)
library(phyloseq)
library(tidyverse)
# 1. Charger la table de comptage (rarifiée ou non)
table <- read_qza("data/rarified_table.qza")$data
# 1. Charger la table de comptage (rarifiée ou non)
table <- read_qza("data/rarefied_table.qza")$data
# 2. Charger la taxonomie
taxonomy <- read_qza("data/taxonomy_gg2_full_length.qza")$data
View(table)
# Nettoyer la taxonomie en colonnes
tax_clean <- taxonomy %>%
separate(Taxon, into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";\\s*", fill = "right") %>%
column_to_rownames("Feature.ID") %>%
as.matrix()
# 3. Charger les métadonnées
metadata <- read_q2metadata("data/GP_metadata.txt")
3. Charger les métadonnées
# 3. Charger les métadonnées
metadata <- read_tsv("data/GP_metadata.txt")
metadata_tsv <- file.path("data","GP_metadata.txt")
feature_table_qza <- file.path("data","rarefied_table.qza")
taxonomy_qza <- file.path("data","taxonomy_gg2_full_length.qza")
RawData.phy <- qza_to_phyloseq(
features = feature_table_qza,
taxonomy = taxonomy_qza,
metadata = metadata_tsv
)
metadata <- read_q2metadata("data/GP_metadata.txt")
View(tax_clean)
library(tidyverse)
# 1. Lire le fichier metadata (sans la ligne q2:types)
metadata_raw <- read_tsv("data/GP_metadata.txt", col_types = cols())
# 2. Compléter les lignes vides dans la première colonne
metadata_clean <- metadata_raw %>%
tidyr::fill(1, .direction = "down")  # complète les NA dans la 1ʳᵉ colonne
# 3. Créer un identifiant unique pour chaque ligne si nécessaire
# Ici, on fusionne Site et plot_number pour créer #SampleID
metadata_clean <- metadata_clean %>%
mutate(`#SampleID` = paste0(Site, "_", plot_number)) %>%
select(`#SampleID`, everything())
# 4. Définir les types de colonnes (q2:types)
types_line <- c(
"#q2:types",
rep("categorical", 9),  # pour Site à Establishment
rep("numeric", 6)       # pour pH à Plough
)
# 5. Créer le fichier final avec la ligne q2:types
metadata_ready <- bind_rows(
types_line,
metadata_clean
)
